# import necessary module
import numpy as np
import os
import re

def extract_file(path, suffix):
    f_list = os.listdir(path)
    file_list_suffix=[]
    for i in f_list:
        if os.path.splitext(i)[1] == suffix:
            file_list_suffix.append(i)
    print(file_list_suffix)
    return file_list_suffix


def write_merge_head(in_path, file_list, merge_file_name):
    point_count = 0
    for i in file_list:
        with open(in_path + i, 'rb') as x:
            lines = x.readlines()
            str_line = lines[3]
            print(str_line)

            pattern = re.compile(r'\d+')  # 查找数字
            result1 = pattern.findall(str_line.decode('utf-8'))
            point_count += int(result1[0])
            print(point_count)

    head = 'ply\nformat binary_little_endian 1.0\n' \
          'comment generated by tinyply 2.2\n' \
          'element vertex %d\n' \
          'property float x\n' \
          'property float y\n' \
          'property float z\n' \
          'end_header\n' % (point_count)

    with open(merge_file_name, 'wb+') as f2:
        f2.write(head.encode())

    return head

def extract_data(in_path, out_path,file_list):
    for i in file_list:
        with open(in_path + i, 'rb') as f1:
            lines = f1.readlines()[8:]

        with open(out_path + i, 'wb+') as f2:
            for line in lines:
                f2.write(line)

def write_merge_data(in_path, file_list, merge_file_name):
    for i in file_list:
        with open(in_path + i, 'rb') as f1:
            lines = f1.readlines()

        with open(merge_file_name, 'ab+') as f2:
            for line in lines:
                f2.write(line)


def makedirs(path):
    if not os.path.exists(path):
        os.makedirs(path)

ply_path  = './'
temp_path = './temp/'
out_path  = './out/'

# os.remove(temp_path)
# os.remove(out_path)
makedirs(temp_path)
makedirs(out_path)

file_list = extract_file(ply_path, '.ply')
extract_data(ply_path, temp_path, file_list)

file_list_temp = extract_file(temp_path,'.ply')

write_merge_head(ply_path, file_list,       out_path+'all.ply')
write_merge_data(temp_path, file_list_temp, out_path+'all.ply')
